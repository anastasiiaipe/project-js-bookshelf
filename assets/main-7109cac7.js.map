{"version":3,"file":"main-7109cac7.js","sources":["../../src/js/loader.js","../../src/js/topBtn.js","../../src/js/books-API.js","../../src/js/render-categories.js","../../src/js/books-page.js"],"sourcesContent":["'use strict';\n\nconst loaderContainer = document.querySelector('.loader');\n\nfunction showLoader() {\n  loaderContainer.classList.remove('visually-hidden');\n}\n\nfunction hideLoader() {\n  loaderContainer.classList.add('visually-hidden');\n}\n\nshowLoader(); // Показати loader перед початком завантаження сторінки\n\nwindow.addEventListener('load', () => {\n  setTimeout(() => {\n    hideLoader();\n  }, 350);\n});\n","// Функція, яка прокручує сторінку на початок\nfunction scrollToTop() {\n  window.scrollTo({\n    top: 0,\n    behavior: 'smooth',\n  });\n}\n\nconst scrollToTopBtn = document.querySelector('.top-btn');\nscrollToTopBtn.style.display = 'none';\n\n// Показати кнопку, коли користувач прокрутив сторінку\nwindow.addEventListener('scroll', () => {\n  if (window.scrollY > window.innerHeight) {\n    scrollToTopBtn.style.display = 'inline-flex';\n  } else {\n    scrollToTopBtn.style.display = 'none';\n  }\n});\n\n// Встановлення обробника подій для кнопки\nscrollToTopBtn.addEventListener('click', scrollToTop);\n","\nimport axios from \"axios\";\n// import { renderTopBooks, renderCategoriesList, renderBooksByCategory } from './render-categories.js';\n\nconst BASE_URL = 'https://books-backend.p.goit.global/books';\n\nconst fetchData = async (endpoint, params = null) => {\n  try {\n    const response = await axios.get(`${BASE_URL}${endpoint}`, { params });\n    console.log('Data from server:', response.data)\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error; // Пробрасываем ошибку дальше для обработки в вызывающем коде\n  }\n};\n\n// Получение списка категорий\nexport const getCategoryList = async () => {\n  return fetchData('/category-list');\n};\n\n// Получение списка топовых книг\nexport const getTopBooks = async () => {\n  return fetchData('/top-books');\n};\n// Получение книг по категории\nexport const getBooksByCategory = async (categoryName = '') => {\n  return fetchData('/category', { category: categoryName });\n};\n// Получение информации о книге по ID\nexport const getBookById = async (id) => {\n  return fetchData(`/${id}`);\n};\n\n","import { getTopBooks, getCategoryList, getBooksByCategory, getBookInfo } from './books-API.js';\n//Render one book\nexport const renderOneBook = (book) => {\n  const { _id, title, author, book_image } = book;\n  return `\n    <li class=\"books-box-itm\" id=\"${_id}\">\n      <div class=\"books-box-wrap\">\n        <img\n          class=\"books-img\"\n          src=\"${book_image}\"\n          alt=\"${title}\"\n        />\n        <div class=\"books-overlay\">\n          <a href=\"#\" data-id=\"${_id}\" class=\"books-overlay-text\">quick view</a>\n        </div>\n      </div>\n      <div class=\"books-box-desc\">\n        <p class=\"books-box-desc-title\">${title}</p>\n        <p class=\"books-box-desc-author\">${author}</p>\n      </div> \n    </li>\n  `;\n};\n\n//Render top books\nexport const renderTopBooks = (categorieName, books) => {\n  return `\n    <div class=\"books-box-holder\">\n      <h3 class=\"books-box-subtitle\">${categorieName}</h3>\n      <ul class=\"books-box-list\">${books}</ul>\n      <button data-categorieName=\"${categorieName}\" class=\"books-btn-see-more\" type=\"button\">see more</button>\n    </div>\n  `;\n};\n\n//Render categories\nexport const renderCategoriesList = (categories) => {\n  return categories.map((el) => `\n    <li class=\"categories-itm\">\n      <a href=\"#\" data-categorieName=\"${el.list_name}\">${el.list_name}</a>\n    </li>\n  `).join('');\n};\n\n//Render category books\nexport const renderBooksByCategory = (categoryName, books) => {\n  return `\n    <div class=\"books-category-box visually-hidden\">\n      <h2 class=\"books-box-title\">${categoryName}</h2>\n      <ul class=\"books-category-list\">${books}</ul>\n    </div>\n  `;\n};\n\n\n\n//Render one book\n// function renderOneBook(books) {\n//   const booksRendered = books\n//     .map(el => {\n//       const { _id, book_image, title, author } = el;\n//       return `<li class=\"books-box-itm\" id=\"${_id}\">\n//         <div class=\"books-box-wrap\">\n//                 <img\n//                   class=\"books-img\"\n//                   src=\"${book_image}\"\n//                   alt=\"${title}\"\n//                 />\n//                 <div class=\"books-overlay\">\n//                   <a href=\"#\" data-id=\"${_id}\" class=\"books-overlay-text\">\n//                   quick view </a>\n//                 </div>\n//               </div>\n//               <div class=\"books-box-desc\">\n//                 <p class=\"books-box-desc-title\">${title}</p>\n//                 <p class=\"books-box-desc-author\">${author}</p>\n//               </div> \n//               </li>`;\n//     })\n//     .join('');\n\n//   return booksRendered;\n// }\n// //Render top books\n// export const renderTopBooks = (data, booksPerRow) => {\n//   const categoriesTopBooks = data\n//     .map(el => {\n//       const categorieName = el.list_name;\n//       const books = renderOneBook(el.books.slice(0, booksPerRow));\n//       return `<div class=\"books-box-holder\">\n//           <h3 class=\"books-box-subtitle\">${categorieName}</h3>\n//           <ul class=\"books-box-list\">${books}</ul>\n//           <button data-categorieName=\"${categorieName}\" class=\"books-btn-see-more\" type=\"button\">see more</button>\n//         </div>`;\n//     })\n//     .join('');\n\n//   return `<div class=\"books-container\"><h2 class=\"books-title\">Best Sellers Books</h2>${categoriesTopBooks}</div>`;\n// };\n// //Render categories\n// export const renderCategoriesList = data => {\n//   const categoriesItems = data\n//     .map(el => {\n//       return `<li class=\"categories-itm\"><a href=\"#\" data-categorieName=\"${el.list_name}\">${el.list_name}</a></li>`;\n//     })\n//     .join('');\n\n//   return `<li class=\"categories-itm js-categories-current \"><a href=\"#\" data-categorieName=\"\">All categories</a></li>${categoriesItems}`;\n// };\n// //Render category books\n// export const renderBooksByCategory = (data, categoryName) => {\n//   if (!categoryName) {\n//     return '';\n//   }\n//   const books = renderOneBook(data);\n//   const categoryMarkup = `<div class=\"books-category-box visually-hidden\">\n//   <h2 class=\"books-box-title\">${categoryName}</h2>\n//           <ul class=\"books-category-list\">${books}</ul>\n//           </div>`;\n//   return categoryMarkup;\n// };\n","// Импортируем функции из books-API.js и render-categories.js\nimport { getCategoryList, getTopBooks, getBooksByCategory } from './books-API.js';\nimport { renderCategoriesList, renderTopBooks, renderBooksByCategory } from './render-categories.js';\n\n// Функция для отображения категорий\nasync function displayCategories() {\n  try {\n    const categories = await getCategoryList();\n    const categoriesHTML = renderCategoriesList(categories);\n    const categoriesListContainer = document.querySelector('.categories-list');\n    categoriesListContainer.innerHTML = categoriesHTML;\n  } catch (error) {\n    console.error('Error displaying categories:', error);\n  }\n}\n\n// Функция для отображения топовых книг\nasync function displayTopBooks() {\n  try {\n    const topBooks = await getTopBooks();\n    const topBooksHTML = renderTopBooks(topBooks);\n    const topBooksContainer = document.querySelector('.top-books-box');\n    topBooksContainer.innerHTML = topBooksHTML;\n  } catch (error) {\n    console.error('Error displaying top books:', error);\n  }\n}\n\n// Функция для отображения книг по категории\nasync function displayBooksByCategory(categoryName) {\n  try {\n    const books = await getBooksByCategory(categoryName);\n    const booksHTML = renderBooksByCategory(categoryName, books);\n    const booksByCategoryContainer = document.querySelector('.books-by-category-box');\n    booksByCategoryContainer.innerHTML = booksHTML;\n  } catch (error) {\n    console.error('Error displaying books by category:', error);\n  }\n}\n\n// Инициализация страницы\nasync function initializePage() {\n  try {\n    // Отображаем категории\n    await displayCategories();\n    // Отображаем топовые книги\n    await displayTopBooks();\n    // Здесь вы можете вызвать другие функции инициализации страницы, если это необходимо\n  } catch (error) {\n    console.error('Error initializing page:', error);\n  }\n}\n\n// Добавляем слушатель события для клика по категории\nconst categoriesListContainer = document.querySelector('.categories-list');\ncategoriesListContainer.addEventListener('click', (event) => {\n  if (event.target.tagName === 'A') {\n    const categoryName = event.target.dataset.categorieName;\n    displayBooksByCategory(categoryName);\n  }\n});\n\n// Вызываем инициализацию страницы при загрузке документа\ndocument.addEventListener('DOMContentLoaded', initializePage);\n\n\n\n\n\n\n// import {\n//   getTopBooks,\n//   getCategoryList,\n//   getBooksByCategory,\n// } from './books-API.js';\n\n// const booksContainer = document.querySelector('.books-box');\n// const categoriesListContainer = document.querySelector('.categories-list');\n\n// const BOOKS_PER_ROW_MAP = {\n//   default: 3,\n//   largeScreen: 5,\n//   smallScreen: 1,\n// };\n\n// // Function to display books\n// async function showBooks(renderedContent) {\n//   booksContainer.innerHTML = renderedContent;\n//   const titleElement = document.querySelector('.books-box-desc-title');\n\n//   if (titleElement) {\n//     wrapLastWord(titleElement);\n//   }\n// }\n// // Function to display categories\n// async function showCategories() {\n//   const renderedCategories = await getCategoryList();\n//   categoriesListContainer.innerHTML = renderedCategories;\n// }\n\n// // Function to display top books\n// export async function showTopBooks() {\n//   const windowWidth = window.innerWidth;\n//   const booksPerRow = determineBooksPerRow(windowWidth);\n//   const renderedTop = await getTopBooks(booksPerRow);\n//   showBooks(renderedTop);\n// }\n\n// //===========================================================\n// // Function to display books by category\n\n// // Отримуємо посилання на елемент, в якому будуть відображатися книги\n// const booksListContainer = document.querySelector('.books-category-list');\n// export async function showBooksByCategory(categoryName) {\n//   console.log(categoryName);\n//   //   const renderedBooks = await getBooksByCategory(categoryName);\n//   try {\n//     // Отримуємо книги вибраної категорії з API\n//     const books = await getBooksByCategory(categoryName);\n\n//     // Перевіряємо, чи є книги в цій категорії\n//     if (books.length > 0) {\n//       const booksHTML = renderBooksByCategory(books, categoryName);\n//       // Якщо книги є, відображаємо їх на сторінці\n//       booksListContainer.innerHTML = booksHTML;\n//     } else {\n//       // Якщо книги не знайдено, виводимо повідомлення про це користувачу\n//       booksListContainer.innerHTML = '<p>No books found in this category</p>';\n//     }\n//   } catch (error) {\n//     // Якщо сталася помилка під час отримання даних з API, виводимо повідомлення про це користувачу\n//     console.error('Error fetching books by category:', error);\n//     booksListContainer.innerHTML =\n//       '<p>Failed to fetch books. Please try again later.</p>';\n//   }\n//   //   return showBooks(renderedBooks);\n// }\n\n// // Отримуємо всі елементи категорій\n// const categoryItems = document.querySelectorAll('.categories-itm');\n\n// categoryItems.forEach(item => {\n//   item.addEventListener('click', function (event) {\n//     // Забороняємо перехід за замовчуванням посилання\n//     event.preventDefault();\n\n//     // Отримуємо назву категорії, на яку натиснули\n//     const categoryName = this.dataset.categorieName;\n\n//     // Викликаємо функцію для відображення книг вибраної категорії\n//     showBooksByCategory(categoryName);\n//   });\n// });\n// //===============================================================\n// // Function to wrap the last word in the title\n// function wrapLastWord(titleElement) {\n//   const textContent = titleElement.textContent.split(' ');\n//   const lastWord = textContent.pop();\n//   const updatedContent =\n//     textContent.join(' ') +\n//     (textContent.length > 0\n//       ? ` <span class=\"books-title-color\">${lastWord}</span>`\n//       : lastWord);\n//   titleElement.innerHTML = updatedContent;\n// }\n// // Function to determine the number of books per row based on window width\n// function determineBooksPerRow(windowWidth) {\n//   if (windowWidth >= 1440) {\n//     return BOOKS_PER_ROW_MAP.largeScreen;\n//   } else if (windowWidth < 768) {\n//     return BOOKS_PER_ROW_MAP.smallScreen;\n//   } else {\n//     return BOOKS_PER_ROW_MAP.default;\n//   }\n// }\n\n// // Initialize the page\n// if (booksContainer) {\n//   showTopBooks();\n//   showCategories();\n\n//   categoriesListContainer.addEventListener('click', handleCategoryClick);\n//   booksContainer.addEventListener('click', handleSeeMoreClick);\n// }\n\n// // Event handler for category click\n// async function handleCategoryClick(e) {\n//   e.preventDefault();\n//   const target = e.target;\n//   const categoryName = target.dataset.categorieName;\n\n//   console.log('Category Name:', categoryName);\n//   if (categoryName === `all categories`) {\n//     try {\n//       const resp = await getTopBooks();\n//       booksContainer.insertAdjacentHTML(\n//         'afterbegin',\n//         '<h2 class=\"books-box-title\">Best Sellers <span class=\"books-title-span\">Books</span></h2>'\n//       );\n//       booksContainer.insertAdjacentHTML(\n//         'beforeend',\n//         renderBooksByCategory(resp.data, categoryName)\n//       );\n//       categoriesListContainer\n//         .querySelector('.js-categories-current')\n//         .classList.remove('js-categories-current');\n//       target.classList.add('js-categories-current');\n//     } catch (error) {\n//       console.error('Books was not found :', error.message);\n//     }\n//     return;\n//   } else {\n//     try {\n//       const data = await getBooksByCategory(categoryName);\n//       booksContainer.insertAdjacentHTML('beforeend', showBooksByCategory(data));\n//       categoriesListContainer\n//         .querySelector('.js-categories-current')\n//         .classList.remove('js-categories-current');\n//       target.classList.add('js-categories-current');\n//     } catch (error) {\n//       console.error('Books was not found :', error.message);\n//     }\n//   }\n// }\n\n// //   if (target.tagName === 'A') {\n// //     const categoryName = target.dataset.categoryName;\n\n// //     categoriesListContainer\n// //       .querySelector('.js-categories-current')\n// //       .classList.remove('js-categories-current');\n// //     target.classList.add('js-categories-current');\n\n// //     if (categoryName) {\n// //       showBooksByCategory(categoryName);\n// //     } else {\n// //       showTopBooks();\n// //     }\n// //   }\n\n// // Event handler for \"See More\" click\n// function handleSeeMoreClick(e) {\n//   e.preventDefault();\n//   const target = e.target;\n\n//   if (target.classList.contains('books-btn-see-more')) {\n//     const categoryName = target.dataset.categoryName;\n\n//     categoriesListContainer\n//       .querySelector('.js-categories-current')\n//       .classList.remove('js-categories-current');\n//     categoriesListContainer\n//       .querySelector(`[data-categoryName=\"${categoryName}\"]`)\n//       .classList.add('js-categories-current');\n\n//     showBooksByCategory(categoryName);\n//   }\n// }\n"],"names":["loaderContainer","showLoader","hideLoader","scrollToTop","scrollToTopBtn","BASE_URL","fetchData","endpoint","params","response","axios","error","getCategoryList","getTopBooks","getBooksByCategory","categoryName","renderTopBooks","categorieName","books","renderCategoriesList","categories","el","renderBooksByCategory","displayCategories","categoriesHTML","categoriesListContainer","displayTopBooks","topBooks","topBooksHTML","topBooksContainer","displayBooksByCategory","booksHTML","booksByCategoryContainer","initializePage","event"],"mappings":"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"}