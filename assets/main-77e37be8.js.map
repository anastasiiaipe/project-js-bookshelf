{"version":3,"file":"main-77e37be8.js","sources":["../../src/js/loader.js","../../src/js/topBtn.js","../../src/js/books-API.js","../../src/js/books-page.js"],"sourcesContent":["'use strict';\n\nconst loaderContainer = document.querySelector('.loader');\n\nfunction showLoader() {\n  loaderContainer.classList.remove('visually-hidden');\n}\n\nfunction hideLoader() {\n  loaderContainer.classList.add('visually-hidden');\n}\n\nshowLoader(); // Показати loader перед початком завантаження сторінки\n\nwindow.addEventListener('load', () => {\n  setTimeout(() => {\n    hideLoader();\n  }, 350);\n});\n","// Функція, яка прокручує сторінку на початок\nfunction scrollToTop() {\n  window.scrollTo({\n    top: 0,\n    behavior: 'smooth',\n  });\n}\n\nconst scrollToTopBtn = document.querySelector('.top-btn');\nscrollToTopBtn.style.display = 'none';\n\n// Показати кнопку, коли користувач прокрутив сторінку\nwindow.addEventListener('scroll', () => {\n  if (window.scrollY > window.innerHeight) {\n    scrollToTopBtn.style.display = 'inline-flex';\n  } else {\n    scrollToTopBtn.style.display = 'none';\n  }\n});\n\n// Встановлення обробника подій для кнопки\nscrollToTopBtn.addEventListener('click', scrollToTop);\n","\nimport axios from \"axios\";\nimport { renderTopBooks, renderCategoriesList, renderBooksByCategory } from './render-categories.js';\n\nconst BASE_URL = 'https://books-backend.p.goit.global';\n\n//Fatch for top books\nlet savedFetch = JSON.parse(sessionStorage.getItem('savedfetch')) || '';\nexport const fetchGeneral = async booksPerRow => {\n\n  if(!savedFetch) {\n    const endpoint = '/books/top-books/';\n    const fetchUrl = BASE_URL + endpoint;\n  \n    try {\n      const response = await axios.get(fetchUrl);\n      sessionStorage.setItem('savedfetch', JSON.stringify(response.data));\n      savedFetch = response.data;\n      return renderTopBooks(response.data, booksPerRow);\n    } catch (error) {\n      console.log(error);\n    }\n  } else {\n    return renderTopBooks(savedFetch, booksPerRow);\n  }\n  \n};\n\n//Fatch for categories\nexport const getCategoryList = async () => {\n  const endpoint = '/books/category-list/';\n  const fetchUrl = BASE_URL + endpoint;\n\n  try {\n    const response = await axios.get(fetchUrl);\n    return renderCategoriesList(response.data);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//Fatch for categories books\nexport const getBooksByCategory = async categoryName => {\n  const endpoint = '/books/category/';\n  const fetchUrl = BASE_URL + endpoint;\n  const params = {\n    category: categoryName,\n  };\n\n  try {\n    const response = await axios.get(fetchUrl, { params });\n    return renderBooksByCategory(response.data, categoryName);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// повертає дані однієї книги по id\nexport const getBookInfo = async id => {\n  const endpoint = `/books/${id}`;\n  const fetchUrl = BASE_URL + endpoint;\n\n  try {\n    const response = await axios.get(fetchUrl);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n\n\n// const fetchData = async (endpoint, params = null) => {\n//   const fetchUrl = `${BASE_URL}/books${endpoint}`;\n\n//   try {\n//     const response = await axios.get(fetchUrl, { params });\n//     console.log('Data from server:', response.data)\n//     return response.data;\n//   } catch (error) {\n//     console.log(error);\n//   }\n// };\n\n// export const getTopBooks = async (booksPerRow) => {\n//   const data = await fetchData('/top-books/');\n//   return renderTopBooks(data, booksPerRow);\n// };\n\n// export const getCategoryList = async () => {\n//   const data = await fetchData('/category-list/');\n//   return renderCategoriesList(data);\n// };\n\n\n// // export const getBooksByCategory = async (categoryName = '') => {\n// //   const data = await fetchData('/category?category=', categoryName );\n// //   return renderBooksByCategory(data);\n// // };\n\n// export const getBooksByCategory = async (categoryName = '') => {\n//   const encodedCategoryName = encodeURIComponent(categoryName);\n//   const endpoint = `/category?category=${encodedCategoryName}`;\n\n//   const data = await fetchData(endpoint);\n//   console.log('Category name3:', data);\n//   // return renderBooksByCategory(categoryName, data);\n//   const dataArray = Object.values(data); // Преобразование объекта в массив\n//   return renderBooksByCategory(dataArray);\n// };\n\n// export const getBookInfo = async (id) => {\n//   return fetchData(`/${id}`);\n// };\n\n","// // Импортируем функции из books-API.js и render-categories.js\n// import { getCategoryList, getTopBooks, getBooksByCategory } from './books-API.js';\n// import { renderCategoriesList, renderTopBooks, renderBooksByCategory } from './render-categories.js';\n\nconst booksContainer = document.querySelector('.books-box');\nconst categoriesListContainer = document.querySelector('.categories-list');\n\nconst BOOKS_PER_ROW_MAP = {\n    'default': 3,\n    'largeScreen': 5,\n    'smallScreen': 1\n};\n\n// Function to display books\nasync function showBooks(renderedContent) {\n    booksContainer.innerHTML = renderedContent;\n    const titleElement = document.querySelector('.books-box-desc-title');\n    \n    if (titleElement) {\n        wrapLastWord(titleElement);\n    }\n}\n// Function to display categories\nasync function showCategories() {\n    const renderedCategories = await getCategoryList();\n    categoriesListContainer.innerHTML = renderedCategories;\n}\n\n// Function to display top books\nexport async function showTopBooks() {\n    const windowWidth = window.innerWidth;\n    const booksPerRow = determineBooksPerRow(windowWidth);\n    const renderedTop = await getTopBooks(booksPerRow);\n    showBooks(renderedTop);\n}\n\n// Function to display books by category\nexport async function showBooksByCategory(categoryName) {\n    const renderedBooks = await getBooksByCategory(categoryName);\n    return showBooks(renderedBooks);\n}\n  \n  \n// Function to wrap the last word in the title\nfunction wrapLastWord(titleElement) {\n      const textContent = titleElement.textContent.split(\" \");\n      const lastWord = textContent.pop();\n    const updatedContent = textContent.join(\" \") + (textContent.length > 0 ? ` <span class=\"books-title-color\">${lastWord}</span>` : lastWord);\n    titleElement.innerHTML = updatedContent;\n}\n// Function to determine the number of books per row based on window width\nfunction determineBooksPerRow(windowWidth) {\n    if (windowWidth >= 1440) {\n        return BOOKS_PER_ROW_MAP.largeScreen;\n    } else if (windowWidth < 768) {\n        return BOOKS_PER_ROW_MAP.smallScreen;\n    } else {\n        return BOOKS_PER_ROW_MAP.default;\n    }\n}\n\n// Initialize the page\nif (booksContainer) {\n    showTopBooks();\n    showCategories();\n    \n    categoriesListContainer.addEventListener('click', handleCategoryClick);\n    booksContainer.addEventListener('click', handleSeeMoreClick);\n}\n\n// Event handler for category click\nfunction handleCategoryClick(e) {\n    e.preventDefault();\n    const target = e.target;\n    \n    if (target.tagName === 'A') {\n        const categoryName = target.dataset.categoryName;\n        \n        categoriesListContainer.querySelector('.js-categories-current').classList.remove('js-categories-current');\n        target.classList.add('js-categories-current');\n\n        if (categoryName === 'all categories') {\n            // Якщо натиснуто \"Усі категорії\", показати TopBooks\n            showTopBooks();\n        } else {\n            // Якщо натиснуто конкретну категорію, показати книги з цієї категорії\n            showBooksByCategory(categoryName);\n        }\n    }\n}\n\n// Event handler for \"See More\" click\nfunction handleSeeMoreClick(e) {\n    e.preventDefault();\n    const target = e.target;\n    \n    if (target.classList.contains('books-btn-see-more')) {\n        const categoryName = target.dataset.categoryName;\n        \n        categoriesListContainer.querySelector('.js-categories-current').classList.remove('js-categories-current');\n        categoriesListContainer.querySelector(`[data-categoryName=\"${categoryName}\"]`).classList.add('js-categories-current');\n        \n        showBooksByCategory(categoryName);\n    }\n}\n\n// import {\n//   getTopBooks,\n//   getCategoryList,\n//   getBooksByCategory,\n// } from './books-API.js';\n\n// const booksContainer = document.querySelector('.books-box');\n// const categoriesListContainer = document.querySelector('.categories-list');\n\n// const BOOKS_PER_ROW_MAP = {\n//   default: 3,\n//   largeScreen: 5,\n//   smallScreen: 1,\n// };\n\n// // Function to display books\n// async function showBooks(renderedContent) {\n//   booksContainer.innerHTML = renderedContent;\n//   const titleElement = document.querySelector('.books-box-desc-title');\n\n//   if (titleElement) {\n//     wrapLastWord(titleElement);\n//   }\n// }\n// // Function to display categories\n// async function showCategories() {\n//   const renderedCategories = await getCategoryList();\n//   categoriesListContainer.innerHTML = renderedCategories;\n// }\n\n// // Function to display top books\n// export async function showTopBooks() {\n//   const windowWidth = window.innerWidth;\n//   const booksPerRow = determineBooksPerRow(windowWidth);\n//   const renderedTop = await getTopBooks(booksPerRow);\n//   showBooks(renderedTop);\n// }\n\n// //===========================================================\n// // Function to display books by category\n\n// // Отримуємо посилання на елемент, в якому будуть відображатися книги\n// const booksListContainer = document.querySelector('.books-category-list');\n// export async function showBooksByCategory(categoryName) {\n//   console.log(categoryName);\n//   //   const renderedBooks = await getBooksByCategory(categoryName);\n//   try {\n//     // Отримуємо книги вибраної категорії з API\n//     const books = await getBooksByCategory(categoryName);\n\n//     // Перевіряємо, чи є книги в цій категорії\n//     if (books.length > 0) {\n//       const booksHTML = renderBooksByCategory(books, categoryName);\n//       // Якщо книги є, відображаємо їх на сторінці\n//       booksListContainer.innerHTML = booksHTML;\n//     } else {\n//       // Якщо книги не знайдено, виводимо повідомлення про це користувачу\n//       booksListContainer.innerHTML = '<p>No books found in this category</p>';\n//     }\n//   } catch (error) {\n//     // Якщо сталася помилка під час отримання даних з API, виводимо повідомлення про це користувачу\n//     console.error('Error fetching books by category:', error);\n//     booksListContainer.innerHTML =\n//       '<p>Failed to fetch books. Please try again later.</p>';\n//   }\n//   //   return showBooks(renderedBooks);\n// }\n\n// // Отримуємо всі елементи категорій\n// const categoryItems = document.querySelectorAll('.categories-itm');\n\n// categoryItems.forEach(item => {\n//   item.addEventListener('click', function (event) {\n//     // Забороняємо перехід за замовчуванням посилання\n//     event.preventDefault();\n\n//     // Отримуємо назву категорії, на яку натиснули\n//     const categoryName = this.dataset.categorieName;\n\n//     // Викликаємо функцію для відображення книг вибраної категорії\n//     showBooksByCategory(categoryName);\n//   });\n// });\n// //===============================================================\n// // Function to wrap the last word in the title\n// function wrapLastWord(titleElement) {\n//   const textContent = titleElement.textContent.split(' ');\n//   const lastWord = textContent.pop();\n//   const updatedContent =\n//     textContent.join(' ') +\n//     (textContent.length > 0\n//       ? ` <span class=\"books-title-color\">${lastWord}</span>`\n//       : lastWord);\n//   titleElement.innerHTML = updatedContent;\n// }\n// // Function to determine the number of books per row based on window width\n// function determineBooksPerRow(windowWidth) {\n//   if (windowWidth >= 1440) {\n//     return BOOKS_PER_ROW_MAP.largeScreen;\n//   } else if (windowWidth < 768) {\n//     return BOOKS_PER_ROW_MAP.smallScreen;\n//   } else {\n//     return BOOKS_PER_ROW_MAP.default;\n//   }\n// }\n\n// // Initialize the page\n// if (booksContainer) {\n//   showTopBooks();\n//   showCategories();\n\n//   categoriesListContainer.addEventListener('click', handleCategoryClick);\n//   booksContainer.addEventListener('click', handleSeeMoreClick);\n// }\n\n// // Event handler for category click\n// async function handleCategoryClick(e) {\n//   e.preventDefault();\n//   const target = e.target;\n//   const categoryName = target.dataset.categorieName;\n\n//   console.log('Category Name:', categoryName);\n//   if (categoryName === `all categories`) {\n//     try {\n//       const resp = await getTopBooks();\n//       booksContainer.insertAdjacentHTML(\n//         'afterbegin',\n//         '<h2 class=\"books-box-title\">Best Sellers <span class=\"books-title-span\">Books</span></h2>'\n//       );\n//       booksContainer.insertAdjacentHTML(\n//         'beforeend',\n//         renderBooksByCategory(resp.data, categoryName)\n//       );\n//       categoriesListContainer\n//         .querySelector('.js-categories-current')\n//         .classList.remove('js-categories-current');\n//       target.classList.add('js-categories-current');\n//     } catch (error) {\n//       console.error('Books was not found :', error.message);\n//     }\n//     return;\n//   } else {\n//     try {\n//       const data = await getBooksByCategory(categoryName);\n//       booksContainer.insertAdjacentHTML('beforeend', showBooksByCategory(data));\n//       categoriesListContainer\n//         .querySelector('.js-categories-current')\n//         .classList.remove('js-categories-current');\n//       target.classList.add('js-categories-current');\n//     } catch (error) {\n//       console.error('Books was not found :', error.message);\n//     }\n//   }\n// }\n\n// //   if (target.tagName === 'A') {\n// //     const categoryName = target.dataset.categoryName;\n\n// //     categoriesListContainer\n// //       .querySelector('.js-categories-current')\n// //       .classList.remove('js-categories-current');\n// //     target.classList.add('js-categories-current');\n\n// //     if (categoryName) {\n// //       showBooksByCategory(categoryName);\n// //     } else {\n// //       showTopBooks();\n// //     }\n// //   }\n\n// // Event handler for \"See More\" click\n// function handleSeeMoreClick(e) {\n//   e.preventDefault();\n//   const target = e.target;\n\n//   if (target.classList.contains('books-btn-see-more')) {\n//     const categoryName = target.dataset.categoryName;\n\n//     categoriesListContainer\n//       .querySelector('.js-categories-current')\n//       .classList.remove('js-categories-current');\n//     categoriesListContainer\n//       .querySelector(`[data-categoryName=\"${categoryName}\"]`)\n//       .classList.add('js-categories-current');\n\n//     showBooksByCategory(categoryName);\n//   }\n// }\n"],"names":["loaderContainer","showLoader","hideLoader","scrollToTop","scrollToTopBtn","booksContainer","categoriesListContainer","BOOKS_PER_ROW_MAP","showBooks","renderedContent","titleElement","wrapLastWord","showCategories","renderedCategories","showTopBooks","windowWidth","booksPerRow","determineBooksPerRow","renderedTop","showBooksByCategory","categoryName","renderedBooks","textContent","lastWord","updatedContent","handleCategoryClick","handleSeeMoreClick","e","target"],"mappings":"ssBAEA,MAAMA,EAAkB,SAAS,cAAc,SAAS,EAExD,SAASC,GAAa,CACpBD,EAAgB,UAAU,OAAO,iBAAiB,CACpD,CAEA,SAASE,GAAa,CACpBF,EAAgB,UAAU,IAAI,iBAAiB,CACjD,CAEAC,IAEA,OAAO,iBAAiB,OAAQ,IAAM,CACpC,WAAW,IAAM,CACfC,GACD,EAAE,GAAG,CACR,CAAC,ECjBD,SAASC,GAAc,CACrB,OAAO,SAAS,CACd,IAAK,EACL,SAAU,QACd,CAAG,CACH,CAEA,MAAMC,EAAiB,SAAS,cAAc,UAAU,EACxDA,EAAe,MAAM,QAAU,OAG/B,OAAO,iBAAiB,SAAU,IAAM,CAClC,OAAO,QAAU,OAAO,YAC1BA,EAAe,MAAM,QAAU,cAE/BA,EAAe,MAAM,QAAU,MAEnC,CAAC,EAGDA,EAAe,iBAAiB,QAASD,CAAW,ECdnC,KAAK,MAAM,eAAe,QAAQ,YAAY,CAAC,ECHhE,MAAME,EAAiB,SAAS,cAAc,YAAY,EACpDC,EAA0B,SAAS,cAAc,kBAAkB,EAEnEC,EAAoB,CACtB,QAAW,EACX,YAAe,EACf,YAAe,CACnB,EAGA,eAAeC,EAAUC,EAAiB,CACtCJ,EAAe,UAAYI,EAC3B,MAAMC,EAAe,SAAS,cAAc,uBAAuB,EAE/DA,GACAC,EAAaD,CAAY,CAEjC,CAEA,eAAeE,GAAiB,CAC5B,MAAMC,EAAqB,MAAM,kBACjCP,EAAwB,UAAYO,CACxC,CAGO,eAAeC,GAAe,CACjC,MAAMC,EAAc,OAAO,WACrBC,EAAcC,EAAqBF,CAAW,EAC9CG,EAAc,MAAM,YAAYF,CAAW,EACjDR,EAAUU,CAAW,CACzB,CAGO,eAAeC,EAAoBC,EAAc,CACpD,MAAMC,EAAgB,MAAM,mBAAmBD,CAAY,EAC3D,OAAOZ,EAAUa,CAAa,CAClC,CAIA,SAASV,EAAaD,EAAc,CAC9B,MAAMY,EAAcZ,EAAa,YAAY,MAAM,GAAG,EAChDa,EAAWD,EAAY,MACzBE,EAAiBF,EAAY,KAAK,GAAG,GAAKA,EAAY,OAAS,EAAI,oCAAoCC,CAAQ,UAAYA,GACjIb,EAAa,UAAYc,CAC7B,CAEA,SAASP,EAAqBF,EAAa,CACvC,OAAIA,GAAe,KACRR,EAAkB,YAClBQ,EAAc,IACdR,EAAkB,YAElBA,EAAkB,OAEjC,CAGIF,IACAS,IACAF,IAEAN,EAAwB,iBAAiB,QAASmB,CAAmB,EACrEpB,EAAe,iBAAiB,QAASqB,CAAkB,GAI/D,SAASD,EAAoBE,EAAG,CAC5BA,EAAE,eAAc,EAChB,MAAMC,EAASD,EAAE,OAEjB,GAAIC,EAAO,UAAY,IAAK,CACxB,MAAMR,EAAeQ,EAAO,QAAQ,aAEpCtB,EAAwB,cAAc,wBAAwB,EAAE,UAAU,OAAO,uBAAuB,EACxGsB,EAAO,UAAU,IAAI,uBAAuB,EAExCR,IAAiB,iBAEjBN,IAGAK,EAAoBC,CAAY,CAEvC,CACL,CAGA,SAASM,EAAmBC,EAAG,CAC3BA,EAAE,eAAc,EAChB,MAAMC,EAASD,EAAE,OAEjB,GAAIC,EAAO,UAAU,SAAS,oBAAoB,EAAG,CACjD,MAAMR,EAAeQ,EAAO,QAAQ,aAEpCtB,EAAwB,cAAc,wBAAwB,EAAE,UAAU,OAAO,uBAAuB,EACxGA,EAAwB,cAAc,uBAAuBc,CAAY,IAAI,EAAE,UAAU,IAAI,uBAAuB,EAEpHD,EAAoBC,CAAY,CACnC,CACL"}